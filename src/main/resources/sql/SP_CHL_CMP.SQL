--CREATE USER TEMPORARY TABLESPACE "TBS_TEMP" IN DATABASE PARTITION GROUP "IBMDEFAULTGROUP"  PAGESIZE 32K  MANAGED BY DATABASE  USING ( File '/mp/mpdb/tbs_temp' 131072 )  EXTENTSIZE 32  PREFETCHSIZE AUTOMATIC  BUFFERPOOL "IBMDEFAULTBP"  OVERHEAD 7.5  TRANSFERRATE 0.06  AUTORESIZE NO  NO FILE SYSTEM CACHING
--db2 update db cfg for mpos using DECFLT_ROUNDING ROUND_HALF_UP IMMEDIATE

--call MPOS.SP_CHL_CMP('05','384984159660',?)
--DROP PROCEDURE "MPOS"."SP_CHL_CMP";
CREATE OR REPLACE PROCEDURE "MPOS"."SP_CHL_CMP" (
    IN "I_CHLNO"	VARCHAR(50),	--05 微信二清，10 支付宝二清，20 百付宝
    IN "I_BATID"	DEC(20),
    OUT "O_ERRMSG"	VARCHAR(128)
)
LANGUAGE SQL
BEGIN 
/*=====================================================================+           
  功能描述：移动收单渠道对账
            
  编写人员：phio
  设计日期：2016/08/23
  修改历史：
  修改日期  修改人员   修改原因
 20170418  LINYQ      多机构接入改造 BAT2_CMP_RESULT/BAT2_CMP_RESULT_FAIL 表中增加 BANK_CODE 字段;
-----------------------------------------------------------------------*/

--------------------------常用变量定义--------------------------
DECLARE IRET INTEGER DEFAULT 0 ;
--定义SQL异常警告信息捕捉变量
DECLARE SQLCODE INT DEFAULT 0 ;		        --SQL返回代码
DECLARE SQLSTATE CHAR(5) DEFAULT '00000' ;--SQL默认返回代码'00000'，返回成功
--------------------------应用变量定义---------------------------
DECLARE V_BATID DEC(20);
DECLARE V_CKTURN INT;

----------------------------------异常日志处理-------------------------
--SQL产生的非上述异常的处理
DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN
	SET O_ERRMSG = O_ERRMSG ||',SQLCODE='||TRIM(CHAR(SQLCODE))||',SQLSTATE='||SQLSTATE;	
	--ROLLBACK ;
END;

--DGTT
DECLARE GLOBAL  TEMPORARY  TABLE  SESSION.TMP_BAT2_CMP_RESULT(
CHLID DEC(20,0),
MPOSID DEC(20,0),
BATID DEC(20),
CLDT VARCHAR(50),
TRTM VARCHAR(50),
CHANNEL_NO	VARCHAR(50),
CHL_ORDER_ID	VARCHAR(50),
MY_ORDER_ID	VARCHAR(50),
MCH_NO	VARCHAR(50),
SEC_MCH_NO	VARCHAR(50),
TRAM	DEC(15,2),
TRTP	VARCHAR(50),
REL_ORDER_ID VARCHAR(50),
MEMO	VARCHAR(250),
BRH_ID VARCHAR(50),
MY_MCH_NO VARCHAR(50),
MY_SEC_MCH_NO VARCHAR(50),
TERM_NO VARCHAR(50),
CKTURN INT,
CKFG INT,
CKDT DATE,
TRADE_TYPE  VARCHAR(50),
MCH_ORDER_ID	VARCHAR(50),
REL_MCH_ORDER_ID VARCHAR(50),
PAYBANK VARCHAR(50),
FZFG CHAR(1),
MY_MCH_RATE DEC(10,4),
MY_SEC_MCH_RATE DEC(10,4),
D0FG CHAR(1),
TRADE_CODE VARCHAR(50),
BANK_CODE VARCHAR(32)	--银行编号
) WITH REPLACE ON COMMIT PRESERVE ROWS NOT LOGGED ;

SET O_ERRMSG = '-2';
--根据时间戳初始化批次号，并发情况下有概率重复
--SET V_BATID = TO_CHAR(CURRENT TIMESTAMP,'YYYYMMDDHH24MISSFF6')+1;
SET V_BATID = I_BATID;

SET O_ERRMSG = '-3';
--检查商户表的唯一性
IF EXISTS (SELECT MAIN_MCHT_NO,COUNT(1) FROM IMP_MAIN_MCHT_INFO GROUP BY MAIN_MCHT_NO HAVING COUNT(1)>1) THEN
	RETURN;
END IF;
SET O_ERRMSG = '-4';
--检查二级商户表费率的唯一性
IF EXISTS (SELECT MAIN_MCHT_NO,SUB_ZX_MCHT_NO,COUNT(1) FROM IMP_SECD_FEE_INFO WHERE SUB_ZX_MCHT_NO<>'' GROUP BY MAIN_MCHT_NO,SUB_ZX_MCHT_NO HAVING COUNT(1)>1) THEN
	RETURN;
END IF;
SET O_ERRMSG = '-5';
--检查二级商户表费率的唯一性（交易时根据渠道和二级商户号取费率的）
IF EXISTS (SELECT CHANNEL_NO,SUB_ZX_MCHT_NO,COUNT(1) FROM IMP_SECD_FEE_INFO WHERE SUB_ZX_MCHT_NO<>'' GROUP BY CHANNEL_NO,SUB_ZX_MCHT_NO HAVING COUNT(1)>1) THEN
	RETURN;
END IF;
SET O_ERRMSG = '-6';
--检查流水表费率的完整性
IF EXISTS (SELECT MY_ORDER_ID FROM MPOS.BAT2_CMP_MPOS_DTL WHERE MY_MCH_RATE IS NULL OR (FZFG IN ('Y','D') AND MY_SEC_MCH_RATE IS NULL) FETCH FIRST 1 ROWS ONLY) THEN
	RETURN;
END IF;
SET O_ERRMSG = '-7';
--检查流水FAIL表费率的完整性
IF EXISTS (SELECT MY_ORDER_ID FROM MPOS.BAT2_CMP_MPOS_DTL_FAIL WHERE MY_MCH_RATE IS NULL OR (FZFG IN ('Y','D') AND MY_SEC_MCH_RATE IS NULL) FETCH FIRST 1 ROWS ONLY) THEN
	RETURN;
END IF;

SET O_ERRMSG = '-8';
--锁表，最大化性能
LOCK TABLE BAT2_CMP_MPOS_DTL IN EXCLUSIVE MODE;
LOCK TABLE BAT2_CMP_CHL_DTL IN EXCLUSIVE MODE;

SET O_ERRMSG = '-9';
--进行第一轮按照我方订单号的对账,将对上的结果放入结果表
SET V_CKTURN = 1;
INSERT INTO SESSION.TMP_BAT2_CMP_RESULT
	SELECT * FROM (
		SELECT CH.ID,MP.ID,V_BATID,MP.CLDT,MP.TRTM, MP.CHANNEL_NO, MP.CHL_ORDER_ID, MP.MY_ORDER_ID, MP.MCH_NO, MP.SEC_MCH_NO, MP.TRAM, 
			MP.TRTP, MP.REL_ORDER_ID, MP.MEMO, MP.BRH_ID, MP.MY_MCH_NO, MP.MY_SEC_MCH_NO,MP.TERM_NO, V_CKTURN,
		CASE
--		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP AND  CH.SEC_MCH_NO=MP.SEC_MCH_NO THEN 0 --金额相等,交易类型相等，二级商户号相等
		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP THEN 0 --金额相等,交易类型相等
		WHEN CH.MY_ORDER_ID IS NULL THEN 2	--我方多
		WHEN MP.MY_ORDER_ID IS NULL THEN 1	--渠道方多
		WHEN CH.TRAM!=MP.TRAM THEN -3	--金额不等
		WHEN CH.TRTP!=MP.TRTP THEN -4	--交易类型不等
--		WHEN CH.SEC_MCH_NO!=MP.SEC_MCH_NO THEN -5	--二级商户号不等
		END AS CKFG,CURRENT DATE,
			MP.TRADE_TYPE,MP.MCH_ORDER_ID,'',	--商户原订单号预留
			MP.PAYBANK,MP.FZFG,MP.MY_MCH_RATE,MP.MY_SEC_MCH_RATE,MP.D0FG,MP.TRADE_CODE, MP.BANK_CODE
		FROM (SELECT * FROM BAT2_CMP_CHL_DTL WHERE CHANNEL_NO=I_CHLNO) CH
		FULL JOIN (SELECT * FROM BAT2_CMP_MPOS_DTL WHERE CHANNEL_NO=I_CHLNO) MP
		ON CH.MY_ORDER_ID=MP.MY_ORDER_ID	--比对基础条件,我方订单号
	) WHERE CKFG <= 0;	--除了1,2

SET O_ERRMSG = '-10';
--CREATE UNIQUE INDEX SESSION.TMP_BAT2_CMP_RESULT_IDX_1 ON SESSION.TMP_BAT2_CMP_RESULT(MY_ORDER_ID);
CREATE  INDEX SESSION.TMP_BAT2_CMP_RESULT_IDX_2 ON SESSION.TMP_BAT2_CMP_RESULT(CHLID);
CREATE  INDEX SESSION.TMP_BAT2_CMP_RESULT_IDX_3 ON SESSION.TMP_BAT2_CMP_RESULT(MPOSID);

SET O_ERRMSG = '-11';
--清理 BAT2_CMP_MPOS_DTL 和 BAT2_CMP_CHL_DTL
EXECUTE IMMEDIATE 'ALTER TABLE BAT2_CMP_MPOS_DTL ACTIVATE NOT LOGGED INITIALLY';
DELETE FROM BAT2_CMP_MPOS_DTL WHERE ID IN (SELECT MPOSID FROM SESSION.TMP_BAT2_CMP_RESULT);
EXECUTE IMMEDIATE 'ALTER TABLE BAT2_CMP_CHL_DTL ACTIVATE NOT LOGGED INITIALLY';
DELETE FROM BAT2_CMP_CHL_DTL WHERE ID IN (SELECT CHLID FROM SESSION.TMP_BAT2_CMP_RESULT);

SET O_ERRMSG = '-12';
--进行第二轮按照相关订单号的对账,将对上的结果放入结果表（针对撤销交易没有撤销订单号的情况，只有原订单号的情况）
SET V_CKTURN = 2;
INSERT INTO SESSION.TMP_BAT2_CMP_RESULT
	SELECT * FROM (
		SELECT CH.ID,MP.ID,V_BATID,MP.CLDT,MP.TRTM, MP.CHANNEL_NO, MP.CHL_ORDER_ID, MP.MY_ORDER_ID, MP.MCH_NO, MP.SEC_MCH_NO, MP.TRAM,
			MP.TRTP, MP.REL_ORDER_ID, MP.MEMO, MP.BRH_ID, MP.MY_MCH_NO, MP.MY_SEC_MCH_NO,MP.TERM_NO, V_CKTURN,
		CASE
--		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP AND CH.SEC_MCH_NO=MP.SEC_MCH_NO AND CH.TRTP='21' THEN 0 --金额相等,交易类型相等，二级商户号相等,交易类型为撤销
		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP AND CH.TRTP='21' THEN 0 --金额相等,交易类型相等，交易类型为撤销
		WHEN CH.MY_ORDER_ID IS NULL THEN 2	--我方多
		WHEN MP.MY_ORDER_ID IS NULL THEN 1	--渠道方多
		WHEN CH.TRAM!=MP.TRAM THEN -3	--金额不等
		WHEN CH.TRTP!=MP.TRTP THEN -4	--交易类型不等
--		WHEN CH.SEC_MCH_NO!=MP.SEC_MCH_NO THEN -5	--二级商户号不等
		WHEN CH.TRTP!='21' THEN -6	--交易类型不为撤销
		END AS CKFG,CURRENT DATE,
			MP.TRADE_TYPE,MP.MCH_ORDER_ID,'',	--商户原订单号预留
			MP.PAYBANK,MP.FZFG,MP.MY_MCH_RATE,MP.MY_SEC_MCH_RATE,MP.D0FG,MP.TRADE_CODE, MP.BANK_CODE
		FROM (SELECT * FROM BAT2_CMP_CHL_DTL WHERE CHANNEL_NO=I_CHLNO) CH
		FULL JOIN (SELECT * FROM BAT2_CMP_MPOS_DTL WHERE CHANNEL_NO=I_CHLNO) MP
		ON CH.REL_ORDER_ID=MP.REL_ORDER_ID --比对基础条件,使用撤销原订单号
	) WHERE CKFG <= 0;	--除了1,2

SET O_ERRMSG = '-13';
--清理 BAT2_CMP_MPOS_DTL 和 BAT2_CMP_CHL_DTL 但保留流水号没匹配上记录
DELETE FROM BAT2_CMP_MPOS_DTL WHERE ID IN (SELECT MPOSID FROM SESSION.TMP_BAT2_CMP_RESULT);
DELETE FROM BAT2_CMP_CHL_DTL WHERE ID IN (SELECT CHLID FROM SESSION.TMP_BAT2_CMP_RESULT);

SET O_ERRMSG = '-14';
--渠道方多的情况一般都是我行掉单，这类情况可以先入账，再查问题（使用CKTURN=3查询）
SET V_CKTURN = 3;
INSERT INTO SESSION.TMP_BAT2_CMP_RESULT
	SELECT * FROM (
		SELECT CH.ID,MP.ID,V_BATID,MP.CLDT,MP.TRTM, MP.CHANNEL_NO, CH.CHL_ORDER_ID, MP.MY_ORDER_ID, MP.MCH_NO, MP.SEC_MCH_NO, MP.TRAM, 
			MP.TRTP, MP.REL_ORDER_ID, MP.MEMO, MP.BRH_ID, MP.MY_MCH_NO, MP.MY_SEC_MCH_NO,MP.TERM_NO, V_CKTURN,
		CASE
--		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP AND  CH.SEC_MCH_NO=MP.SEC_MCH_NO THEN 0 --金额相等,交易类型相等，二级商户号相等,  疑似掉单
		WHEN CH.TRAM=MP.TRAM AND CH.TRTP=MP.TRTP THEN 0 --金额相等,交易类型相等，二级商户号相等,  疑似掉单
		WHEN MP.MY_ORDER_ID IS NULL THEN 1	--渠道方多
		WHEN CH.TRAM!=MP.TRAM THEN -3	--金额不等
		WHEN CH.TRTP!=MP.TRTP THEN -4	--交易类型不等
--		WHEN CH.SEC_MCH_NO!=MP.SEC_MCH_NO THEN -5	--二级商户号不等
		END AS CKFG,CURRENT DATE,
			MP.TRADE_TYPE,MP.MCH_ORDER_ID,'',	--商户原订单号预留
			MP.PAYBANK,MP.FZFG,MP.MY_MCH_RATE,MP.MY_SEC_MCH_RATE,MP.D0FG,MP.TRADE_CODE, MP.BANK_CODE
		FROM (SELECT * FROM BAT2_CMP_CHL_DTL WHERE CHANNEL_NO=I_CHLNO) CH
		LEFT JOIN (SELECT * FROM BAT2_CMP_MPOS_DTL_FAIL WHERE CHANNEL_NO=I_CHLNO) MP
		ON CH.MY_ORDER_ID=MP.MY_ORDER_ID	--比对基础条件,我方订单号
	) WHERE CKFG <= 0;	--除了1

SET O_ERRMSG = '-15';
--清理 BAT2_CMP_CHL_DTL 但保留流水号没匹配上记录
DELETE FROM BAT2_CMP_CHL_DTL WHERE ID IN (SELECT CHLID FROM SESSION.TMP_BAT2_CMP_RESULT);
--此时TMP_BAT2_CMP_RESULT只有CKFG<=0的数据，1、2数据在BAT2_CMP_MPOS_DTL和BAT2_CMP_CHL_DTL中


SET O_ERRMSG = '-16';
--如果两次对账间隔超过31天，可排除隔交和冻结的情况，清除，避免每日对账
DELETE FROM MPOS.BAT2_CMP_MPOS_DTL A WHERE EXISTS (SELECT 1 FROM MPOS.BAT2_CMP_RESULT_FAIL B WHERE B.CKFG=2 AND A.MY_ORDER_ID=B.MY_ORDER_ID AND B.CKDT<CURRENT DATE - 30 DAYS AND A.CHANNEL_NO=I_CHLNO);
DELETE FROM MPOS.BAT2_CMP_CHL_DTL A WHERE EXISTS (SELECT 1 FROM MPOS.BAT2_CMP_RESULT_FAIL B WHERE B.CKFG=1 AND A.MY_ORDER_ID=B.MY_ORDER_ID AND B.CKDT<CURRENT DATE - 30 DAYS AND A.CHANNEL_NO=I_CHLNO);


SET O_ERRMSG = '-17';
LOCK TABLE BAT2_CMP_RESULT IN EXCLUSIVE MODE;
--EXECUTE IMMEDIATE 'ALTER TABLE BAT2_CMP_RESULT ACTIVATE NOT LOGGED INITIALLY';	--FOR DEBUG

--将流水号对上的对账结果存入对账结果表成功表中,同时逐笔计算手续费
--商户费率按照流水中的分账子商户费率、商户费率、商户费率表中的商户费率优先等级进行计算（兼容分账功能）
INSERT INTO MPOS.BAT2_CMP_RESULT(BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO,
		COST_RATE,TOTAL_RATE,COST,TOTAL_FEE,RZAMT,CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK,FZFG,MY_PTMCH_RATE,MY_PTMCH_FEE,D0FG,TRADE_CODE, BANK_CODE)
	SELECT A.BATID, TO_DATE(A.CLDT,'YYYYMMDD'), 'BOTH', A.TRTM, A.CHANNEL_NO, A.CHL_ORDER_ID, A.MY_ORDER_ID, A.MCH_NO, A.SEC_MCH_NO, A.TRAM, A.TRTP, A.REL_ORDER_ID, A.MEMO, A.BRH_ID, A.MY_MCH_NO, A.MY_SEC_MCH_NO,A.TERM_NO,
		B.MAIN_COST_RATE,VALUE(A.MY_SEC_MCH_RATE,A.MY_MCH_RATE),	--渠道成本费率，向商户收取费率
		CAST(ROUND(A.TRAM*B.MAIN_COST_RATE/100,2) AS DEC(15,2)),	--成本
		CAST(ROUND(A.TRAM*VALUE(A.MY_SEC_MCH_RATE,A.MY_MCH_RATE)/100,2) AS DEC(15,2)),	--从交易金额中扣下的总费用，包括成本
		A.TRAM - CAST(ROUND(A.TRAM*VALUE(A.MY_SEC_MCH_RATE,A.MY_MCH_RATE)/100,2) AS DEC(15,2)),	--商户的入账金额
		A.CKTURN, A.CKFG,A.CKDT,A.TRADE_TYPE,A.MCH_ORDER_ID,A.REL_MCH_ORDER_ID,A.PAYBANK,A.FZFG,
		A.MY_SEC_MCH_RATE-A.MY_MCH_RATE,	--分账模式下平台商户的利差费率,普通模式下该字段为NULL
		CAST(ROUND(A.TRAM*(A.MY_SEC_MCH_RATE-A.MY_MCH_RATE)/100,2) AS DEC(15,2)),	--分账模式下平台商户的利差金额
		A.D0FG,A.TRADE_CODE, A.BANK_CODE
	FROM SESSION.TMP_BAT2_CMP_RESULT A
	LEFT JOIN IMP_MAIN_MCHT_INFO B ON A.MCH_NO=B.MAIN_MCHT_NO --主商户表
	--LEFT JOIN IMP_SECD_FEE_INFO C ON A.MCH_NO=C.MAIN_MCHT_NO AND A.MY_SEC_MCH_NO=C.SUB_ZX_MCHT_NO --二级商户表  20161223开始90天后可以去掉该表连接
	WHERE A.CKFG = 0;	--疑似掉单的一起进行计算
	--LEFT JOIN IMP_AGNT_BRH_RATE D ON A.BRH_ID=D.BRH_RATE_ID;	--代理机构表
	
		
SET O_ERRMSG = '-18';
--将ckfg<0的数据放入对账失败表
INSERT INTO MPOS.BAT2_CMP_RESULT_FAIL(BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO,CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK, BANK_CODE)
	SELECT A.BATID, TO_DATE(A.CLDT,'YYYYMMDD'), 'BOTH', A.TRTM, A.CHANNEL_NO, A.CHL_ORDER_ID, A.MY_ORDER_ID, A.MCH_NO, A.SEC_MCH_NO, A.TRAM, A.TRTP, A.REL_ORDER_ID, A.MEMO, A.BRH_ID,
	 	A.MY_MCH_NO, A.MY_SEC_MCH_NO,A.TERM_NO,A.CKTURN, A.CKFG,A.CKDT,A.TRADE_TYPE,A.MCH_ORDER_ID,A.REL_MCH_ORDER_ID,A.PAYBANK, A.BANK_CODE
	FROM SESSION.TMP_BAT2_CMP_RESULT A
	WHERE A.CKFG<0;

SET O_ERRMSG = '-19';
--INSERT INTO MPOS.BAT2_CMP_RESULT_FAIL(BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO, CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK)
--	SELECT V_BATID,TO_DATE(CLDT,'YYYYMMDD'),'MPOS',TRTM,CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO, 0, 2,CURRENT DATE,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,''
--	FROM BAT2_CMP_MPOS_DTL WHERE CHANNEL_NO=I_CHLNO;
--将我方多的结果存入对账失败表中,之前存过的需要过滤
MERGE INTO MPOS.BAT2_CMP_RESULT_FAIL T USING (SELECT * FROM BAT2_CMP_MPOS_DTL WHERE CHANNEL_NO=I_CHLNO) S
	ON T.MY_ORDER_ID=S.MY_ORDER_ID
	WHEN NOT MATCHED THEN
		INSERT (BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO, CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK, BANK_CODE)
		VALUES(V_BATID,TO_DATE(S.CLDT,'YYYYMMDD'),'MPOS',S.TRTM,S.CHANNEL_NO, S.CHL_ORDER_ID, S.MY_ORDER_ID, S.MCH_NO, S.SEC_MCH_NO, S.TRAM, S.TRTP, S.REL_ORDER_ID, S.MEMO,
			S.BRH_ID, S.MY_MCH_NO, S.MY_SEC_MCH_NO,S.TERM_NO, 0, 2,CURRENT DATE,S.TRADE_TYPE,S.MCH_ORDER_ID,S.REL_MCH_ORDER_ID,S.PAYBANK, S.BANK_CODE)
	ELSE IGNORE;	
	
--INSERT INTO MPOS.BAT2_CMP_RESULT_FAIL(BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO, CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK)
--	SELECT V_BATID,TO_DATE(CLDT,'YYYY-MM-DD'),'CHL',TRTM,CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, '', '', '','', 0, 1,CURRENT DATE,'','','',PAYBANK
--	FROM BAT2_CMP_CHL_DTL WHERE CHANNEL_NO=I_CHLNO;
SET O_ERRMSG = '-20';
--将渠道方多的结果存入对账失败表中,之前存过的需要过滤
MERGE INTO MPOS.BAT2_CMP_RESULT_FAIL T 
USING (SELECT * FROM BAT2_CMP_CHL_DTL AS A LEFT JOIN IMP_MAIN_MCHT_INFO AS B ON A.MCH_NO = B.MAIN_MCHT_NO WHERE A.CHANNEL_NO = I_CHLNO) S
	ON T.MY_ORDER_ID = S.MY_ORDER_ID
	WHEN NOT MATCHED THEN
		INSERT (BATID, CLDT, SRC, TRTM, CHANNEL_NO, CHL_ORDER_ID, MY_ORDER_ID, MCH_NO, SEC_MCH_NO, TRAM, TRTP, REL_ORDER_ID, MEMO, BRH_ID, MY_MCH_NO, MY_SEC_MCH_NO,TERM_NO, CKTURN, CKFG,CKDT,TRADE_TYPE,MCH_ORDER_ID,REL_MCH_ORDER_ID,PAYBANK, BANK_CODE)
		VALUES(V_BATID,TO_DATE(S.CLDT,'YYYY-MM-DD'),'CHL', TO_CHAR(TO_DATE(S.TRTM, 'YYYYMMDD HH24MISS'), 'YYYYMMDD HH24MISS'), S.CHANNEL_NO, S.CHL_ORDER_ID, S.MY_ORDER_ID, S.MCH_NO, S.SEC_MCH_NO, S.TRAM, S.TRTP, S.REL_ORDER_ID, S.MEMO,
			'', '', '','', 0, 1,CURRENT DATE,'','','',S.PAYBANK, S.BANK_CODE)
	ELSE IGNORE;	

	
SET O_ERRMSG = '-21';
--更新fail表中曾经失败这次成功的记录，为了性能只更新最近31天的
UPDATE MPOS.BAT2_CMP_RESULT_FAIL SET CKFG = 0,CKSC_BATID = V_BATID WHERE CKDT >= CURRENT DATE - 31 DAYS AND MY_ORDER_ID IN 
	(SELECT MY_ORDER_ID FROM SESSION.TMP_BAT2_CMP_RESULT WHERE CKFG = 0);	
--对于撤销没有交易号的情况，尝试用原交易号更新一下
UPDATE MPOS.BAT2_CMP_RESULT_FAIL SET CKFG = 0,CKSC_BATID = V_BATID WHERE CKDT >= CURRENT DATE - 31 DAYS AND TRTP='21' AND CKFG<>0 AND REL_ORDER_ID IN 
	(SELECT REL_ORDER_ID FROM SESSION.TMP_BAT2_CMP_RESULT WHERE CKFG = 0);	

COMMIT;
SET O_ERRMSG = '0';

END;
